(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{141:function(t,a,i){"use strict";i.r(a);var e=i(7),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("div",{staticClass:"content"},[i("h2",{attrs:{id:"http协议之缓存篇"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#http协议之缓存篇","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP协议之缓存篇")]),i("hr"),i("h3",{attrs:{id:"缓存的好处"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#缓存的好处","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓存的好处")]),i("ol",[i("li",[t._v("减少冗余数据传输和带宽占用")]),i("li",[t._v("减轻服务端压力")]),i("li",[t._v("减少延迟和网络堵塞，从而缩短资源加载时间")]),i("li",[t._v("加快客户端响应速度")])]),i("h3",{attrs:{id:"本地缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#本地缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 本地缓存")]),i("h4",{attrs:{id:"与本地缓存有关头"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#与本地缓存有关头","aria-hidden":"true"}},[t._v("#")]),t._v(" 与本地缓存有关头")]),i("h5",{attrs:{id:"cache-control"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#cache-control","aria-hidden":"true"}},[t._v("#")]),t._v(" Cache-Control")]),i("ul",[i("li",[t._v("Cache-Control: public     可以被所有用户缓存，包括终端用户和CDN等中间代理服务商")]),i("li",[t._v("Cache-Control: private    只能被终端用户缓存，其他用户禁止缓存")]),i("li",[t._v("Cache-Control: no-cache   不使用本地缓存，向服务器发送请求，若存在合适令牌（Etag)则进行协商缓存")]),i("li",[t._v("Cache-Control: no-store   绝对禁止一切形式的缓存，要求每次都从服务器重新下载")]),i("li",[t._v("Cache-Control: max-age    指定缓存失效时间，单位秒，是相对单位时间，意思是缓存将在xxx秒之后失效,这个选项只在HTTP 1.1可用,并且优先级比Expires高")])]),i("h5",{attrs:{id:"expires"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#expires","aria-hidden":"true"}},[t._v("#")]),t._v(" Expires")]),i("p",[t._v("Expires是HTTP/1.0出现的头信息，同样是决定本地缓存策略的头，它是一个绝对时间，格式如 "),i("strong",[t._v("Expires: Sun, 08 Nov 2009 03:37:26 GMT")]),t._v(" ，只要发送请求时间在这个时间之前，则本地缓存始终有效")]),i("h4",{attrs:{id:"本地缓存实现原理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#本地缓存实现原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 本地缓存实现原理")]),i("p",[t._v("本地缓存是指浏览器在加载某项资源时，命中了本地缓存，则选择直接从本地缓存中加载，放弃请求，它的执行过程如下：")]),i("ul",[i("li",[t._v("浏览器初次发送请求给服务器时，将返回的资源和对应的响应头一起缓存下来。")]),i("li",[t._v("浏览器再次发起该资源请求时，会先检查上一次请求资源时响应头信息中的Cache-Control:max-age和Expires，这两个值指定了资源的过期时间（两者区别参考上文），若资源尚未失效，则命中缓存，不再请求服务器。")]),i("li",[t._v("若资源已失效，则将请求发送给服务器，进入缓存协商阶段。")])]),i("h3",{attrs:{id:"协商缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 协商缓存")]),i("h4",{attrs:{id:"与协商缓存有关头"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#与协商缓存有关头","aria-hidden":"true"}},[t._v("#")]),t._v(" 与协商缓存有关头")]),i("h5",{attrs:{id:"last-modified-if-modified-since"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since","aria-hidden":"true"}},[t._v("#")]),t._v(" Last-Modified/If-Modified-Since")]),i("ul",[i("li",[t._v("浏览器第一次请求资源时，服务器会把资源的最新修改时间Last-Modified:Expires: Sun, 08 Nov 2009 03:37:26 GMT放在响应头中返回")]),i("li",[t._v("浏览器第二次请求时，会把上一次服务器返回的修改时间放在请求头If-Modified-Since中发送给服务器，服务器将拿这个值和服务器上资源的最新修改时间对比")]),i("li",[t._v("若请求头中的时间大于等于资源最新修改时间，则命中缓存，服务器返回新的响应header信息，更新缓存中的header，但并不返回资源内容，而是告知浏览器可以直接从缓存获取，否则返回最新资源。\n这时，利用Etag能够更加准确的控制缓存，因为Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符。")])]),i("p",[t._v("Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。")]),i("h5",{attrs:{id:"etag-if-none-match"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match","aria-hidden":"true"}},[t._v("#")]),t._v(" Etag/If-None-Match")]),i("p",[t._v("这两个值是由服务器生成的每个资源的唯一标识字符串，只要资源有变化就这个值就会改变；其判断过程与Last-Modified/If-Modified-Since类似，与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化。")]),i("h4",{attrs:{id:"last-modified与etag"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#last-modified与etag","aria-hidden":"true"}},[t._v("#")]),t._v(" Last-Modified与Etag")]),i("p",[t._v("Last-Modified存在着以下几个比较难解决的问题：")]),i("ul",[i("li",[t._v("一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；")]),i("li",[t._v("某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；")]),i("li",[t._v("某些服务器不能精确的得到文件的最后修改时间。")])]),i("h3",{attrs:{id:"与缓存相关状态码"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#与缓存相关状态码","aria-hidden":"true"}},[t._v("#")]),t._v(" 与缓存相关状态码")]),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"right"}},[t._v("缓存类型")]),i("th",{staticStyle:{"text-align":"right"}},[t._v("获取资源形式")]),i("th",{staticStyle:{"text-align":"right"}},[t._v("状态码")]),i("th",{staticStyle:{"text-align":"right"}},[t._v("发送请求到服务器")])])]),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"right"}},[t._v("本地缓存")]),i("td",{staticStyle:{"text-align":"right"}},[t._v("从缓存获取")]),i("td",{staticStyle:{"text-align":"right"}},[t._v("200(from cache)")]),i("td",{staticStyle:{"text-align":"right"}},[t._v("否，直接从缓存取")])]),i("tr",[i("td",{staticStyle:{"text-align":"right"}},[t._v("协商缓存")]),i("td",{staticStyle:{"text-align":"right"}},[t._v("从缓存获取")]),i("td",{staticStyle:{"text-align":"right"}},[t._v("304(not modified)")]),i("td",{staticStyle:{"text-align":"right"}},[t._v("是，返回304，直接从缓存取")])]),i("tr",[i("td",{staticStyle:{"text-align":"right"}},[t._v("未缓存")]),i("td",{staticStyle:{"text-align":"right"}},[t._v("从服务器获取")]),i("td",{staticStyle:{"text-align":"right"}},[t._v("200(ok)")]),i("td",{staticStyle:{"text-align":"right"}},[t._v("是，服务器")])])])])])}],!1,null,null,null);a.default=r.exports}}]);